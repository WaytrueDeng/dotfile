#+begin_src emacs-lisp
(use-package cl-lib
  :ensure t)
 (defvar bootstrap-version)
 (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
       (bootstrap-version 5))
   (unless (file-exists-p bootstrap-file)
     (with-current-buffer
         (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
       (goto-char (point-max))
       (eval-print-last-sexp)))
   (load bootstrap-file nil 'nomessage))
 
 (setq package-enable-at-startup nil)
 (straight-use-package 'use-package)
 (setq straight-use-package-by-default t)
(setq package-archives '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "~/.emacs.d/lisp/use-package")
  (require 'use-package))
#+end_src
* Init
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq-default cursor-type 'bar)

  ;;(setq split-height-threshold nil)
  ;;(setq split-width-threshold 0)

  (setq inhibit-splash-screen 1)


  (use-package dashboard 
    :ensure t
    :init
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text") 
                                      (bookmarks . "book")))
    ;; 设置banner
    (setq dashboard-center-content t) 
    (setq dashboard-set-heading-icons t) 
    (setq dashboard-set-file-icons t) 
    (setq dashboard-set-navigator t))
#+end_src
* Font&UI
#+begin_src emacs-lisp

  (setq org-image-actual-width '(600))

  (use-package all-the-icons :ensure t)

  (use-package all-the-icons-dired :ensure t :hook ('dired-mode
                     . 'all-the-icons-dired-mode))

  (use-package solarized-theme :ensure t :config )
  (use-package doom-themes :ensure t) 
  (load-theme 'doom-solarized-light t)
  (use-package doom-modeline :ensure t :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 10) (doom-modeline-bar-width 3) (doom-modeline-buffer-file-name-style 'file-name))

#+end_src
* Behavior&Input
#+begin_src emacs-lisp
(setq mac-option-modifier 'meta
      mac-command-modifier 'super)
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
)

(use-package evil-org
  :ensure t
  :after org
  :config
  (winner-mode +1)
  (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
  (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(setq evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init)
  :custom (evil-collection-setup-minibuffer t))

(use-package format-all
  :defer t
  :ensure t)

;(defun my/changeinput2en()
;    "this is a function automatic changing input method to en"
;  (interactive)
;(if (eq major-mode 'org-mode)
;  (shell-command "fcitx-remote -c")))
;
;(defun my/changeinput2cn()
;    "this is a function automatic changing input method to en"
;  (interactive)
;(if (eq major-mode 'org-mode)
;  (shell-command "fcitx-remote -o")))
;(add-hook 'evil-insert-state-entry-hook #'my/changeinput2cn)
;(add-hook 'evil-insert-state-exit-hook #'my/changeinput2en)

(defun my/changeinto-roam-link ()
    "changeinto-Org-roam link."
    (interactive)
    (backward-kill-word 1)
    (my/insert-roam-link)
    (yank 1))
(defun my/insert-roam-link ()
    "Inserts an Org-roam link."
    (interactive)
    (insert "[[roam:]]")
    (backward-char 2))

(defun my/auto-highlighting ()
    "auto-highlighting"
    (interactive)
    (backward-word)
    (insert "~")
    (forward-word)
    (insert "~")
    (forward-char 1))

(defun my/auto-strikethrough()
    "auto-highlighting"
    (interactive)
    (backward-word)
    (insert "+")
    (forward-word)
    (insert "+")
    (forward-char 1))

(defun my/auto-bold()
    "auto-highlighting"
    (interactive)
    (backward-word)
    (insert "*")
    (forward-word)
    (insert "*")
    (forward-char 1))

(defun my/auto-underline()
    "auto-underline"
    (interactive)
    (backward-word)
    (insert "_")
    (forward-word)
    (insert "_")
    (forward-char 1))


(setcdr evil-insert-state-map nil)

(define-key evil-insert-state-map [escape] 'evil-normal-state)
(define-key evil-normal-state-map (kbd "DEL") 'org-mark-ring-goto)
(define-key evil-normal-state-map (kbd "Q") 'kill-buffer-and-window)
(define-key evil-normal-state-map (kbd "S") 'save-buffer)
(define-key evil-insert-state-map (kbd "M-[") #'my/insert-roam-link)
(define-key evil-insert-state-map (kbd "M-]") #'my/changeinto-roam-link)
(define-key evil-insert-state-map (kbd "M-}") #'my/auto-rice-English-Word)
(define-key evil-insert-state-map (kbd "M-~") #'my/auto-highlighting)
(define-key evil-insert-state-map (kbd "M-*") #'my/auto-bold)
(define-key evil-insert-state-map (kbd "M-+") #'my/auto-strikethrough)
(define-key evil-insert-state-map (kbd "M-_") #'my/auto-underline)


(global-set-key (kbd "C-x C-d") 'dirvish)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c i") 'org-insert-link)
;; 设置 org-agenda 打开快捷键
(global-set-key (kbd "C-c a") 'org-agenda)
;; org-capture
(global-set-key (kbd "<f6>") 'org-capture)

;; occurmode
(global-set-key (kbd "M-s o") 'occur-dwim)

#+end_src
* BasicImprove
#+begin_src emacs-lisp
(use-package which-key
    :ensure t
    :config
    (which-key-mode))

(use-package flycheck
  :ensure t
  :defer 2
  :config (global-flycheck-mode))

;; Enable vertico

(use-package smartparens
  :ensure t
  :config
 (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)
  (smartparens-global-mode)
)
(setq enable-recursive-minibuffers t)

(setq make-backup-files nil)
(setq auto-save-default nil)

(setq create-lockfiles nil)
;; 关闭自动换行
;; (setq truncate-partial-width-windows t)
;; 回车时创建新行并且对齐
(global-set-key (kbd "<escape>")      'keyboard-escape-quit)
;; Dired-mode 默认递归
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
;; Emacsn能从剪贴板读取内容
(setq x-select-enable-clipboard t
      x-select-enable-primary t)
;; Dired-mode 只用一个buffer
(put 'dired-find-alternate-file 'disabled nil)

(define-advice show-paren-function (:around (fn) fix-show-paren-function)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
	(t (save-excursion
	     (ignore-errors (backward-up-list))
	     (funcall fn)))))
;; 删除换行符
(defun remove-dos-eol ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))

;; 选中一个区域后,输入一个字母会替代当前区域
(delete-selection-mode 1)

;; 关闭警告音量
(setq ring-bell-function 'ignore)

;; 简化yes or no
(fset 'yes-or-no-p 'y-or-n-p)

;(use-package perspeen
;  :ensure t
;  :diminish 
;  :init
;  ;; (setq perspeen-use-tab t)
;  (setq perspeen-keymap-prefix [C-tab]) 
;  :config (perspeen-mode))

(use-package yasnippet-snippets
  :ensure t
  :config
  )
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))

;; 撤销树
(use-package undo-tree 
  :ensure t 
  :hook (after-init . global-undo-tree-mode) 
  :init (setq undo-tree-visualizer-timestamps t undo-tree-enable-undo-in-region nil undo-tree-auto-save-history nil)

  ;; HACK: keep the diff window
  (with-no-warnings (make-variable-buffer-local 'undo-tree-visualizer-diff) 
		    (setq-default undo-tree-visualizer-diff t)))

;; Use embedded webkit browser if possible
  (when (featurep 'xwidget-internal)
    (push '("\\.\\(x?html?\\|pdf\\)\\'"
	    .
	    (lambda (file _link)
	      (xwidget-webkit-browse-url (concat "file://" file))
	      (let ((buf (xwidget-buffer (xwidget-webkit-current-session))))
		(when (buffer-live-p buf)
		  (and (eq buf (current-buffer)) (quit-window))
		  (pop-to-buffer buf)))))
	  org-file-apps))

(use-package recentf
  :straight t
  :bind (("C-x C-r" . recentf-open-files))
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
	      recentf-exclude
	      '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
		"\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
		"\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
		"^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
		(lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))
#+end_src
* UsefulApps
#+begin_src emacs-lisp
(use-package magit
 :ensure t
 :defer t
 :commands (magit)
       )
(line-number-mode -1)
(setq large-file-warning-threshold nil)

(use-package dirvish
   :straight t)
#+end_src
* Org
#+begin_src emacs-lisp
(straight-use-package '(org :type built-in))	
(use-package org
  :config
  (setq org-ellipsis " ▾"
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-hide-block-startup nil
        org-cycle-separator-lines 2
	org-id-link-to-org-use-id t
	org-return-follows-link t)
  )

(use-package valign
  :ensure t
  :hook
  (org-mode . valign-mode))

(use-package org-download
  :after org
  :ensure t
  :config
  (setq-default org-download-image-dir "~/org/Attachments")
  (setq org-download-annotate-function (lambda (_link) ""))
  :hook ((org-mode dired-mode) . org-download-enable)
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank)
         ("s-C" . org-download-clipboard)
         )))
(use-package emacsql
    :ensure t)
(when (and (>= emacs-major-version 26) (executable-find "cc"))
  (use-package org-roam
    :ensure t
    :hook (after-init . org-roam-setup)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n k" . org-id-get-create)
           ("C-c n v" . org-roam-preview-visit)
           ("C-c n t" . org-roam-dailies-capture-today)
           ("C-c n I" . org-roam-insert-immediate))
    :init
    (setq org-roam-directory "~/Documents/roam"
          org-roam-v2-ack t)
    :config
    (setq org-id-extra-files (org-roam--list-files org-roam-directory))
    (unless (file-exists-p org-roam-directory)
      (make-directory org-roam-directory))))

(use-package org-roam-ui
    :straight t
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
(use-package org-transclusion
	:straight t
	:after org)


(use-package org-superstar
  :ensure t
  :hook (org-mode . org-superstar-mode)
  :config
;(set-face-attribute 'org-level-4 nil :weight 'bold :height 1.0) ;\large
;(set-face-attribute 'org-level-3 nil :weight 'bold :height 1.2) ;\large
;(set-face-attribute 'org-level-2 nil :weight 'bold :height 1.44) ;\Large
;(set-face-attribute 'org-level-1 nil :weight 'bold :height 1.728)
  (setq org-superstar-item-bullet-alist '((?- . ?⁍)))
  (setq org-superstar-headline-bullets-list
  '("➊" "➋" "➌" "➍" "➎" "➏" "➐" "➑" "➒" "➓"))
  )
#+end_src
* Custom
#+begin_src emacs-lisp
(custom-set-variables
  '(evil-undo-system 'undo-tree)
 '(flycheck-warning ((t (:inherit nil :underline nil))))
 '(org-roam-completion-everywhere t)
 '(org-roam-completion-system 'default)
 '(org-roam-db-update-idle-seconds 2))
#+end_src


	
